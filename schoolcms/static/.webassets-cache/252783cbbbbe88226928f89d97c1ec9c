V/** @jsx React.DOM */\u000a\u000aSC.ResizeTextArea = React.createClass({displayName: 'ResizeTextArea',\u000a  getInitialState: function(){\u000a    return {\u000a      'value': this.props.value,\u000a    }\u000a  },\u000a  textareaResize: function(){\u000a    var textarea = React.findDOMNode(this.refs.textarea).getElementsByTagName('textarea')[0];\u000a    textarea.style.height = '0px'\u000a    textarea.style.height = textarea.scrollHeight+20 + 'px';\u000a    if(this.props.onChange){\u000a      this.props.onChange();\u000a    }else if(this.props.valueLink){\u000a      this.props.valueLink.requestChange(this.refs.textarea.getValue());\u000a    }\u000a  },\u000a  getValue: function(){\u000a    return this.refs.textarea.getValue();\u000a  },\u000a  render: function() {\u000a    var out = ['valueLink', 'onChange', 'type', 'ref'];\u000a    var other = {};\u000a    for(var key in this.props){\u000a      if(out.indexOf(key) === -1){\u000a        other[key]=this.props[key];\u000a      }\u000a    }\u000a    other.className = (other.className?other.className:'')+'resizetextarea';\u000a    return (\u000a      React.createElement(RB.Input, React.__spread({},  other, {type: "textarea", ref: "textarea", onChange: this.textareaResize, value: this.state.value}))\u000a    );\u000a  }\u000a});
p1
.